---
env:
  es6: true
  node: true

root: true

ignorePatterns:
  - '**/dist'
  - '**/node_modules'

extends:
  - plugin:import/typescript
  - plugin:react/recommended
  - plugin:react/jsx-runtime
  - plugin:react-hooks/recommended
  - plugin:react-redux/recommended
  - plugin:regexp/recommended
  - plugin:promise/recommended
  - plugin:prettier/recommended

overrides:
  # TypeScript sources
  - files:
      - '*.ts'
      - '*.tsx'
    extends:
      - plugin:@typescript-eslint/recommended
      - plugin:@typescript-eslint/recommended-requiring-type-checking
      - plugin:prettier/recommended
    parser: '@typescript-eslint/parser'
    parserOptions:
      ecmaVersion: 2023
      sourceType: module
      project:
        - ./tsconfig.json
        - ./packages/client/tsconfig.json
        - ./packages/server/tsconfig.json
    plugins:
      - '@typescript-eslint'
    rules:
      # Indentation is handled by prettier
      # https://typescript-eslint.io/rules/indent/
      '@typescript-eslint/indent': off

      # Gives some false positives
      '@typescript-eslint/unbound-method': off

      # Prefer interfaces for type definitions
      '@typescript-eslint/consistent-type-definitions':
        - error
        - interface

      # Warn when using hooks from react-redux directly
      # https://redux.js.org/usage/usage-with-typescript#use-typed-hooks-in-components
      no-restricted-imports: off
      '@typescript-eslint/no-restricted-imports':
        - error
        - paths:
            - name: react-redux
              importNames:
                - useSelector
                - useDispatch
              message: Use typed hooks `useDispatch` and `useSelector` from app instead.
            - name: '@reduxjs/toolkit'
              importNames:
                - createSlice
              message: Use extended `createSlice` from app instead.

      # Consistent use of type imports
      '@typescript-eslint/consistent-type-imports':
        - error
        - disallowTypeAnnotations: false

      # TypeScript provides the same checks
      # https://typescript-eslint.io/docs/linting/troubleshooting#eslint-plugin-import
      import/named: off
      import/namespace: off
      import/default: off
      import/no-named-as-default-member: off

      # ignore exponential and polynomial backtracking
      regexp/no-super-linear-backtracking: off

  # Allow to "omit" props using destructuring w/o having them marked as "unused"
  - files:
      - 'public/client/src/**/*.tsx'
    rules:
      '@typescript-eslint/no-unused-vars': [error, { ignoreRestSiblings: true }]

  # Filename exceptions
  - files:
      - vite.config.ts
      - '**/*.d.ts'
    rules:
      filenames/match-exported: off
      filenames/match-regex: off

plugins:
  - filenames
  - import
  - react-redux
  - jsx-a11y
  - prettier

rules:
  # Enforce all block statements to be wrapped in curly braces
  curly: error

  ########### Filenames

  filenames/match-exported: error

  # Allow camelCase.js + PascalCase.js filenames
  filenames/match-regex:
    - error
    - ^[A-Za-z][a-z0-9]*(?:[A-Z][a-z0-9]*)*(?:[A-Z]?)$
    - false

  # No index files as it makes searching for files horrible
  filenames/no-index: error

  ########### Imports

  # Setup import order
  import/order:
    - error
    - alphabetize:
        order: asc
        caseInsensitive: true
      groups: [builtin, external, internal, unknown, parent, sibling, index]
      newlines-between: always

  # Turn on errors for missing imports
  import/no-unresolved: error

  ########### Prettier

  prettier/prettier: error
  arrow-body-style: off
  prefer-arrow-callback: off

settings:
  react:
    version: detect

  ########### Imports

  import/extensions: [.js, .jsx, .ts, .tsx]

  # Mark workspaces as internal for proper import sorting
  import/internal-regex: '^#'

  import/parsers:
    '@typescript-eslint/parser': [.ts, .tsx]

  import/resolver:
    typescript:
      project: ./tsconfig.json
